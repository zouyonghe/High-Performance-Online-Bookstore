@startuml
package model{
annotation model {


+DeleteBook(id uint64): error
+GetBook(title string): *Book, bool, error
+GetBookByID(id uint64): *Book, error
+CreateCart(userID uint64): error
+GetCart(userID uint64): *Cart, error
+GetCartBook(cartID uint64, bookID uint64): *CartBook
+DeleteCart(cartID uint64): error
+DeleteFromCart(cartID uint64, bookID uint64, number uint): error
+CheckCartBook(cartID uint64, bookID uint64): bool
+ClearCart(cartID uint64): error
+CreateCartByName(userName string): error
+CreateOrder(userID uint64): error
+GetOrder(userID uint64): *Order, error
+DeleteUser(id uint64): error
+GetUser(username string): *User, bool, error
+GetUserByID(id uint64): *User, error
}
class BookBase {
+Index: int
+Title: string
+Price: float64
+Number: uint

}
class Book {
+: Base
+Title: string
+Price: float64
+IsSell: bool
+Number: uint
+Author: string
+PublishDate: string
+Category: string
+TableName(): string
+CreateBook(deleted bool): error
+UpdateBook(): error
+SetBookName(name string): error
+SetBookPrice(price float64): error
+SetBookCategory(category string): error
+SetBookAuthor(author string): error
+SetBookNum(num int): error
+SetSell(): error
+SetUnSell(): error
+SetBookSell(sell bool): error
+Validate(): error
}
class Cart {
+: Base
+UserID: uint64
+Books: []CartBook
+CartPrice: float64
+GetBookList(): []*BookBase, float64, error
+AddBook(cb CartBook): error
}
class CartBook {
+: Base
+CartID: uint64
+BookID: uint64
+UnitPrice: float64
+Number: uint

}
class Token {
+Token: string

}
class Base {
+ID: uint64
+CreatedAt: Time
+UpdatedAt: Time
+DeletedAt: DeletedAt

}
class UserList {
+Lock: *Mutex
+IdMap: map[uint64]*UserInfo

}
class BookList {
+Lock: *Mutex
+IdMap: map[uint64]*BookInfo

}
class UserInfo {
+Id: uint64
+Username: string
+ShortId: string
+Password: string
+Role: string
+CreatedAt: string
+UpdatedAt: string

}
class BookInfo {
+Id: uint64
+Title: string
+ShortId: string
+Author: string
+Price: float64
+PublishDate: string
+Category: string
+IsSell: bool
+Number: uint
+CreatedAt: string
+UpdatedAt: string

}
class BookClass {
+ClassId: uint64
+ClassName: string

}
class CartInfo {
+UserID: uint64

}
class OrderInfo {


}
class Order {
+: Base
+UserID: uint64
+Books: []OrderBook
+OrderPrice: float64
+IsApproved: bool
+TableName(): string
+AddBook(books []*BookBase): error
+TotalPrice(): float64
+UpdateOrderPrice(): error
}
class OrderBook {
+: Base
+OrderID: uint64
+BookID: uint64
+UnitPrice: float64
+Number: uint

}
class UserBaseModel {
+Phone: string
+Address: string

}
class User {
+: Base
+Username: string
+Password: string
+Role: string
+Cart: Cart
+Orders: []Order
+TableName(): string
+CreateUser(deleted bool): error
+UpdateUser(): error
+Compare(pwd string): error
+Encrypt(): error
+Validate(): error
+GetRole(): string
+SetRole(role string)
}
}
Book --> Base
Cart --> Base
User --> Cart
CartBook --> Base
Order --> Base
OrderBook --> Base
User --> Base

@enduml